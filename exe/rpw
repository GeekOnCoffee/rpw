#!/usr/bin/env ruby

require "thor"
require "thor/hollaback"
require_relative "../lib/rpw"

module RPW
  class SubCommandBase < Thor
    def self.banner(command, namespace = nil, subcommand = false)
      "#{basename} #{subcommand_prefix} #{command.usage}"
    end

    def self.subcommand_prefix
      name.gsub(%r{.*::}, "").gsub(%r{^[A-Z]}) { |match| match[0].downcase }.gsub(%r{[A-Z]}) { |match| "-#{match[0].downcase}" }
    end
  end

  class Lesson < SubCommandBase
    class_before :exit_with_no_key

    desc "next", "Proceed to the next lesson of the workshop"
    option :open
    def next
      say "Proceeding to next lesson..."
      client.next(options[:open])
    end

    desc "complete", "Mark the current lesson as complete"

    def complete
      say "Marked current lesson as complete"
      client.complete
    end

    desc "list", "Show all available workshop lessons"

    def list
      say "All available workshop lessons:"
      client.list.each do |lesson|
        puts "#{"  " * lesson["indent"]}[#{lesson["position"]}]: #{lesson["title"]}"
      end
    end

    desc "download [CONTENT | all]", "Download one or all workshop contents"

    def download(content)
      client.download(content)
    end

    desc "show [CONTENT]", "Show any workshop lesson, shows current lesson w/no arguments"
    option :open
    def show(content = :current)
      client.show(content, options[:open])
    end

    private

    def client
      @client ||= RPW::Client.new
    end

    def exit_with_no_key
      exit(1) unless client.setup?
    end
  end

  class Progress < SubCommandBase
    class_before :exit_with_no_key

    desc "set [LESSON]", "Set current lesson to a particular lesson"

    def set(lesson)
      client.set_progress(lesson)
    end

    desc "reset", "Erase all progress and start over"

    def reset
      yes? "Are you sure you want to reset your progress? (Y/N)"
      client.reset_progress
    end

    desc "show", "Show current workshop progress"
    def show
      data = client.progress
      say "The Rails Performance Workshop"
      say "You have completed #{data[:completed]} out of #{data[:total]} total sections."
      say "Current lesson: #{data[:current_lesson]["title"]}"
      say "Progress by Section (X == completed, O == current):"
      data[:sections].each do |section|
        say "#{section[:title]}: #{section[:progress]}"
      end
    end

    private

    def client
      @client ||= RPW::Client.new
    end

    def exit_with_no_key
      exit(1) unless client.setup?
    end

    default_task :show
  end

  class CLI < Thor
    class_before :check_version
    class_before :check_setup

    desc "lesson [SUBCOMMAND]", "View and download lessons"
    subcommand "lesson", Lesson
    desc "progress [SUBCOMMAND]", "View and set progress"
    subcommand "progress", Progress

    def self.exit_on_failure?
      true
    end

    desc "start", "Tutorial and onboarding"

    def start
      print_banner
      say "Welcome to the Rails Performance Workshop."
      say ""
      say "This is rpw, the command line client for this workshop."
      say ""
      say "This client will download files from the internet into the current"
      say "working directory, so it's best to run this client from a new directory"
      say "that you'll use as your 'scratch space' for working on the Workshop."
      say ""
      return unless yes? "Are you in a directory that we can safely add new folders and files to? (Y/N)"
      puts ""
      say "We'll create a .rpw_key file at #{File.expand_path("~/.rpw")} to save your purchase key."
      key = ask("Your Purchase Key: ")

      client.setup(key)

      puts ""

      say "Successfully authenticated with the RPW server and saved your key."

      puts ""

      say "rpw works by downloading files into the current working directory."
      say "We're going to (idempotently!) create a few directories in the current working directory."
      puts ""
      return unless yes? "Is that OK? (Y/N)"

      client.directory_setup

      say "Setup complete!"
      puts ""
      say "Here are some important commands for you to know:"
      say "$ rpw lesson next     | Proceed to the next part of the workshop."
      say "$ rpw lesson complete | Mark current lesson as complete."
      say "$ rpw lesson list     | List all workshop lessons. Note each lesson is preceded with an ID."
      say "$ rpw lesson download | Download any or all lessons."
      say "$ rpw lesson show     | Show any particular workshop lesson."
      say "$ rpw progress        | Show where you're currently at in the workshop."
      say "$ rpw help            | Help! You can also ask in Slack."
      puts ""
      say "Generally, you'll just be doing a lot of $ rpw lesson next"
      say "Remember to ask on Slack for help if you get stuck or encounter bugs."
      say "Let's get going! $ rpw lesson next"
    end

    private

    def client
      @client ||= RPW::Client.new
    end

    def check_version
      unless client.latest_version?
        say "#{r}WARNING: You are running an old version of rpw."
        say "WARNING: Please run `$ gem install rpw`#{reset}"
      end
    end

    def check_setup
      unless client.setup? || current_command_chain == [:start]
        say "#{r}WARNING: You do not have a purchase key set. Run `$ rpw start`#{reset}"
      end
    end

    def print_banner
      puts r
      if `tput cols 80`.to_i < 80
        puts small_banner
      else
        puts banner
      end
      puts reset
    end

    def r
      "\e[31m"
    end

    def reset
      "\e[0m"
    end

    def small_banner
      %(
   _____ _          _____     _ _
  |_   _| |_ ___   | __  |___|_| |___
    | | |   | -_|  |    -| .'| | |_ -|
    |_| |_|_|___|  |__|__|__,|_|_|___|
   _____         ___
  |  _  |___ ___|  _|___ ___ _____ ___ ___ ___ ___
  |   __| -_|  _|  _| . |  _|     | .'|   |  _| -_|
  |__|  |___|_| |_| |___|_| |_|_|_|__,|_|_|___|___|
   _ _ _         _       _
  | | | |___ ___| |_ ___| |_ ___ ___
  | | | | . |  _| '_|_ -|   | . | . |
  |_____|___|_| |_,_|___|_|_|___|  _|
                                |_|
        #{reset})
    end

    def banner
      %(
                                _____ _          _____     _ _
     +hmNMMMMMm/`  -ymMMNh/    |_   _| |_ ___   | __  |___|_| |___
     sMMMMMMMMMy   +MMMMMMMMy    | | |   | -_|  |    -| .'| | |_ -|
     yMMMMMMMMMMy` yMMMMMMMMN    |_| |_|_|___|  |__|__|__,|_|_|___|
     `dMMMMMMMMMMm:-dMMMMMMm:   _____         ___
      `sNMMMMMMMMMMs.:+sso:`   |  _  |___ ___|  _|___ ___ _____ ___ ___ ___ ___
        :dMMMMMMMMMMm/         |   __| -_|  _|  _| . |  _|     | .'|   |  _| -_|
   `:oss+:.sNMMMMMMMMMMy`      |__|  |___|_| |_| |___|_| |_|_|_|__,|_|_|___|___|
   /mMMMMMMd-:mMMMMMMMMMMd.     _ _ _         _       _
   NMMMMMMMMy `hMMMMMMMMMMh    | | | |___ ___| |_ ___| |_ ___ ___
   yMMMMMMMM+  `dMMMMMMMMMy    | | | | . |  _| '_|_ -|   | . | . |
   /hNMMmy-  `/mMMMMMNmy/      |_____|___|_| |_,_|___|_|_|___|  _|
                                                             |_|
        #{reset})
    end
  end
end

RPW::CLI.start(ARGV)
