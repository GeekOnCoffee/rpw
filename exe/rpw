#!/usr/bin/env ruby

require "thor"
require_relative "../lib/rpw"

module RPW
  class SubCommandBase < Thor 
    def self.banner(command, namespace = nil, subcommand = false)
      "#{basename} #{subcommand_prefix} #{command.usage}"
    end
  
    def self.subcommand_prefix
      self.name.gsub(%r{.*::}, '').gsub(%r{^[A-Z]}) { |match| match[0].downcase }.gsub(%r{[A-Z]}) { |match| "-#{match[0].downcase}" } 
    end
  end

  class Lesson < SubCommandBase
    desc "next", "Proceed to the next lesson of the workshop"

    def next
      say "Proceeding to next lesson..."
      client.next
    end

    desc "complete", "Mark the current lesson as complete"

    def complete 
      say "Marked current lesson as complete"
      client.complete
    end

    desc "list", "Show all available workshop lessons"

    def list
      say "All available workshop lessons:"
      client.list.each do |lesson| 
        puts "#{"  " * lesson['indent']}[#{lesson['position']}]: #{lesson['title']}"
      end
    end

    desc "download [CONTENT | all]", "Download one or all workshop contents"

    def download(content)
      client.download(content)
    end

    desc "show [CONTENT]", "Show any workshop lesson"

    def show(content)
      client.show(content)
    end

    private

    def client
      @client ||= RPW::Client.new
    end
  end

  class Progress < SubCommandBase
    desc "set [LESSON]", "Set progress to a particular lesson"

    def set(lesson)
    end

    desc "reset", "Erase all progress and start over"

    def reset
    end
  end


  class CLI < Thor
    desc "lesson [SUBCOMMAND]", "View and download lessons"
    subcommand "lesson", Lesson 
    desc "progress [SUBCOMMAND]", "View and set progress"
    subcommand "progress", Progress  

    def self.exit_on_failure?
      true
    end
    
    desc "setup", "Set up purchase key and directories"

    def setup
      return unless yes? "We're going to (idempotently!) create a few files and directories in the current working directory. Is that OK? (Y/N)"

      say "We'll create a .rpw_key file in the current directory to save your purchase key and course data."
      key = ask("Your Purchase Key: ")

      client.setup(key)

      say "Successfully authenticated with the RPW server and saved your key."
      say "We'll also create a few directories for your course data and progress."

      client.directory_setup

      say "Setup complete!"
    end

    desc "support", "Create a new support ticket, report a bug or issue"

    def support
    end

    private

    def client
      @client ||= RPW::Client.new
    end
  end
end

RPW::CLI.start(ARGV)
